#!/usr/bin/env node
const { argv }     = require('yargs');
const webpack      = require('webpack');
const MinifyPlugin = require('babel-minify-webpack-plugin');
const os           = require('os');
const fs           = require('fs');
const packageJSON  = require('./package.json');

const currenct_folder = process.cwd();

const tagoctx = (module) => `require("${module}")`;

const externals = argv.force ? {} : {
  'tago/analysis': tagoctx('tago/analysis'),
  'tago/device': tagoctx('tago/device'),
  'tago/account': tagoctx('tago/account'),
  'tago/services': tagoctx('tago/services'),
  'tago/utils': tagoctx('tago/utils'),
  'moment-timezone': tagoctx('moment-timezone'),
  tago: tagoctx('tago'),
  async: tagoctx('async'),
  moment: tagoctx('moment'),
  crypto: tagoctx('crypto'),
  co: tagoctx('co'),
  lodash: tagoctx('lodash'),
  underscore: tagoctx('lodash'),
  _: tagoctx('lodash'),
};

if (argv.tsconfig) {
  const tsfile = fs.readFileSync(`${__dirname}/tsconfig.json`, 'utf-8');
  fs.writeFileSync(`${currenct_folder}/tsconfig.json`, tsfile);
  process.exit(0);
}

if (!argv._[0] || argv._[0] === 'help') {
  require('./help');
  process.exit(0);
}

const bannerMessage = `@tago-builder
TagoIO (https://tago.io/)
TagoIO Builder V${packageJSON.version} (https://git.io/vhEW5)

From file    :: ${argv._[0]}
Generated by :: ${os.userInfo().username ? os.userInfo().username : 'Unknown'}
Generated at :: ${Date.now()} (${new Date()})
Machine      :: ${os.hostname()} - ${os.platform()}`;

function build() {
  const input_file = String(argv._[0]);
  const output_file = argv._[1] || `${input_file}.tago.js`;

  const buildConfig = {
    mode: 'development',
    context: currenct_folder,
    entry: `./${input_file}`,
    target: 'node',
    module: { rules: [] },
    output: {
      path: currenct_folder,
      filename: `./${output_file}`,
    },
    plugins: [new webpack.ProgressPlugin()],
    externals,
  };

  if (!argv.removeBanner) {
    buildConfig.plugins.push(new webpack.BannerPlugin(bannerMessage));
  }

  if (argv.sourceMap) {
    buildConfig.devtool = 'inline-source-map';
  }

  if (argv.obfuscate) {
    buildConfig.plugins.push(new MinifyPlugin());
  }

  if (input_file.endsWith('.ts')) {
    let tsconfigFile = `${currenct_folder}/tsconfig.json`;
    let tsLoaderModule = `${currenct_folder}/node_modules/ts-loader`;

    if (!fs.existsSync(tsconfigFile)) {
      tsconfigFile = `${__dirname}/tsconfig.json`;
      console.info('Using tago-builder tsconfig.json\n');
    } else {
      console.info('Using custom tsconfig.json\n');
    }

    if (!fs.existsSync(tsLoaderModule)) {
      tsLoaderModule = `${__dirname}/node_modules/ts-loader`;
    }

    buildConfig.module.rules.push({
      test: /\.ts$/,
      loader: tsLoaderModule,
      options: {
        configFile: tsconfigFile,
      },
    });

    buildConfig.resolve = {
      extensions: ['.ts', '.js'],
    };
  }

  const compiler = webpack(buildConfig);

  console.log('Building... (It may take a few minutes)');
  compiler.run((err, stats) => {
    if (stats.hasErrors()) {
      for (const error of stats.compilation.errors) {
        console.log(error.message);
      }
    } else {
      console.log(`\nAnalysis created at: ./${output_file}`);
    }
  });
}

build();
