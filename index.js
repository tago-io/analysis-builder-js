#!/usr/bin/env node
const { argv }       = require('yargs');
const chalk          = require('chalk');
const webpack        = require('webpack');
const MinifyPlugin   = require('babel-minify-webpack-plugin');
const os             = require('os');
const fs             = require('fs');
const updateNotifier = require('update-notifier');
const externals      = require('./externals');
const packageJSON    = require('./package.json');

const notifier = updateNotifier({ pkg: packageJSON });
notifier.notify({
  defer: false,
  isGlobal: true,
  boxenOptions: {
    padding: 1,
    margin: 1,
    align: 'center',
    borderColor: '#347AB7',
    borderStyle: 'bold',
  },
});

const currentFolder = process.cwd();

if (argv.tsconfig) {
  const tsFile = fs.readFileSync(`${__dirname}/tsconfig.json`, 'utf-8');
  fs.writeFileSync(`${currentFolder}/tsconfig.json`, tsFile);
  process.exit(0);
}

if (!argv._[0] || argv._[0] === 'help') {
  require('./help');
  process.exit(0);
}

const inputFile = String(argv._[0]);
const outputFile = argv._[1] || `${inputFile.replace(/.ts|.js/g, '')}.tago-io.js`;

const bannerMessage = `TagoIO (https://tago.io/)
TagoIO Builder V${packageJSON.version} (https://git.io/JJ8Si)

Generated by     :: ${os.userInfo().username ? os.userInfo().username : 'Unknown'}
Generated at     :: ${new Date().toISOString()} - UTC
Machine          :: ${os.hostname()} - ${os.platform()}
Origin File      :: ${inputFile}
Destination File :: ${outputFile}`;

console.info(chalk.blue(bannerMessage), '\n');

function build() {
  const buildConfig = {
    mode: 'development',
    context: currentFolder,
    entry: `./${inputFile}`,
    target: 'node',
    module: { rules: [] },
    output: {
      path: currentFolder,
      filename: `./${outputFile}`,
    },
    plugins: [new webpack.ProgressPlugin()],
    externals: externals(argv.force),
  };

  if (!argv.removeBanner) {
    buildConfig.plugins.push(new webpack.BannerPlugin(`@tago-io/builder\n${bannerMessage}`));
  }

  if (argv.sourceMap) {
    buildConfig.devtool = 'inline-source-map';
  }

  if (argv.obfuscate) {
    buildConfig.plugins.push(new MinifyPlugin());
  }

  if (inputFile.endsWith('.ts')) {
    let tsconfigFile = `${currentFolder}/tsconfig.json`;
    let tsLoaderModule = `${currentFolder}/node_modules/ts-loader`;

    if (!fs.existsSync(tsconfigFile)) {
      tsconfigFile = `${__dirname}/tsconfig.json`;
      console.info('Using analysis-builder tsconfig.json\n');
    } else {
      console.info('Using custom tsconfig.json\n');
    }

    if (!fs.existsSync(tsLoaderModule)) {
      tsLoaderModule = `${__dirname}/node_modules/ts-loader`;
    }

    buildConfig.module.rules.push({
      test: /\.ts$/,
      loader: tsLoaderModule,
      options: {
        configFile: tsconfigFile,
      },
    });

    buildConfig.resolve = {
      extensions: ['.ts', '.js'],
    };

    buildConfig.output = {
      ...buildConfig.output,
      libraryExport: 'default',
      library: 'module.exports',
      libraryTarget: 'assign',
    };
  }

  const compiler = webpack(buildConfig);

  console.info(chalk.yellow('Building... -It may take a while-'));

  compiler.run((err, stats) => {
    if (stats.hasErrors()) {
      for (const error of stats.compilation.errors) {
        console.info(error.message);
      }
    } else {
      console.info(chalk.green(`\nAnalysis file was saved at: ./${outputFile}`));
    }
  });
}

build();
